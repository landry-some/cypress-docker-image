
# WARNING: this file is automatically generated by generate-config.js
# info on building Docker images on Circle
# https://circleci.com/docs/2.0/building-docker-images/
version: 2.1

commands:
  halt-on-branch:
    description: Halt current CircleCI job if not on master branch
    steps:
      - run:
          name: Halting job if not on master branch
          command: |
            if [[ "$CIRCLE_BRANCH" != "master" ]]; then
              echo "Not master branch, will skip the rest of commands"
              circleci-agent step halt
            else
              echo "On master branch, can continue"
            fi

  halt-if-docker-image-exists:
    description: Halt current CircleCI job if Docker image exists already
    parameters:
      imageName:
        type: string
        description: Docker image name to test
    steps:
      - run:
          name: Check if image << parameters.imageName >> exists
          # using https://github.com/mishguruorg/docker-image-exists
          # to check if Docker hub has the image already
          command: |
            if npx docker-image-exists --quiet --repo << parameters.imageName >>; then
              echo Found image << parameters.imageName >>
              circleci-agent step halt
            else
              echo Did not find Docker image << parameters.imageName >>
            fi

  test-base-image:
    description: Build a test image from base image and test it
    parameters:
      imageName:
        type: string
        description: Cypress base docker image to test
    steps:
      - run:
          name: test image << parameters.imageName >>
          command: |
            docker build -t cypress/test -\<<EOF
            FROM << parameters.imageName >>
            RUN echo "current user: $(whoami)"
            ENV CI=1
            RUN npm init --yes
            RUN npm install --save-dev cypress
            RUN ./node_modules/.bin/cypress verify
            RUN npx @bahmutov/cly init
            RUN ./node_modules/.bin/cypress run
            EOF

  test-browser-image:
    description: Build a test image from browser image and test it
    parameters:
      imageName:
        type: string
        description: Cypress browser docker image to test
    steps:
      - run:
          name: test image << parameters.imageName >>
          # for now assuming Chrome, in the future can pass browser name as a parameter
          command: |
            docker build -t cypress/test -\<<EOF
            FROM << parameters.imageName >>
            RUN echo "current user: $(whoami)"
            ENV CI=1
            RUN npm init --yes
            RUN npm install --save-dev cypress
            RUN ./node_modules/.bin/cypress verify
            RUN npx @bahmutov/cly init
            RUN ./node_modules/.bin/cypress run --browser chrome
            EOF

  test-included-image:
    description: Testing Docker image with Cypress pre-installed
    parameters:
      cypressVersion:
        type: string
        description: Cypress version to test
      imageName:
        type: string
        description: Cypress included docker image to test
    steps:
      - run:
          name: New test project and testing
          command: |
            mkdir test
            cd test
            npm init --yes
            # installing Cypress because @bahmutov/cly scaffolding requires it
            # https://github.com/bahmutov/cly/issues/3
            # so we will install it, scaffold the test project and immediately remove node_modules
            npm i -D cypress@<< parameters.cypressVersion >>
            npx @bahmutov/cly init
            rm -rf package-lock.json package.json node_modules

            echo "Testing Electron browser"
            docker run -it -v $PWD:/e2e -w /e2e cypress/included:<< parameters.cypressVersion >>

            echo "Testing Chrome browser"
            docker run -it -v $PWD:/e2e -w /e2e cypress/included:<< parameters.cypressVersion >> --browser chrome
          working_directory: /tmp

  docker-push:
    description: Log in and push a given image to Docker hub
    parameters:
      imageName:
        type: string
        description: Docker image name to push
    steps:
      - run:
          name: Pushing image << parameters.imageName >> to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker push << parameters.imageName >>

jobs:
  build-base-image:
    machine: true
    parameters:
      dockerName:
        type: string
        description: Image name to build
        default: cypress/base
      dockerTag:
        type: string
        description: Image tag to build like "12.14.0"
    steps:
      - checkout
      - halt-if-docker-image-exists:
          imageName: << parameters.dockerName >>:<< parameters.dockerTag >>
      - run:
          name: building Docker image << parameters.dockerName >>:<< parameters.dockerTag >>
          command: |
            docker build -t << parameters.dockerName >>:<< parameters.dockerTag >> .
          working_directory: base/<< parameters.dockerTag >>

      - test-base-image:
          imageName: << parameters.dockerName >>:<< parameters.dockerTag >>
      - halt-on-branch
      - docker-push:
          imageName: << parameters.dockerName >>:<< parameters.dockerTag >>

  build-browser-image:
    machine: true
    parameters:
      dockerName:
        type: string
        description: Image name to build
        default: cypress/browsers
      dockerTag:
        type: string
        description: Image tag to build like "node12.4.0-chrome76"
    steps:
      - checkout
      - halt-if-docker-image-exists:
          imageName: << parameters.dockerName >>:<< parameters.dockerTag >>
      - run:
          name: building Docker image << parameters.dockerName >>:<< parameters.dockerTag >>
          command: |
            docker build -t << parameters.dockerName >>:<< parameters.dockerTag >> .
          working_directory: browsers/<< parameters.dockerTag >>

      - test-browser-image:
          imageName: << parameters.dockerName >>:<< parameters.dockerTag >>
      - halt-on-branch
      - docker-push:
          imageName: << parameters.dockerName >>:<< parameters.dockerTag >>

  build-included-image:
    machine: true
    parameters:
      dockerName:
        type: string
        description: Image name to build
        default: cypress/included
      dockerTag:
        type: string
        description: Image tag to build, should match Cypress version, like "3.8.1"
    steps:
      - checkout
      - halt-if-docker-image-exists:
          imageName: << parameters.dockerName >>:<< parameters.dockerTag >>
      - run:
          name: building Docker image << parameters.dockerName >>:<< parameters.dockerTag >>
          command: |
            docker build -t << parameters.dockerName >>:<< parameters.dockerTag >> .
          working_directory: included/<< parameters.dockerTag >>

      - test-included-image:
          cypressVersion: << parameters.dockerTag >>
          imageName: << parameters.dockerName >>:<< parameters.dockerTag >>
      - halt-on-branch
      - docker-push:
          imageName: << parameters.dockerName >>:<< parameters.dockerTag >>

workflows:
  version: 2
  build-base-images:
    jobs:
      - build-base-image:
          name: "base 10"
          dockerTag: "10"
      - build-base-image:
          name: "base 10.11.0"
          dockerTag: "10.11.0"
      - build-base-image:
          name: "base 10.15.3"
          dockerTag: "10.15.3"
      - build-base-image:
          name: "base 10.16.0"
          dockerTag: "10.16.0"
      - build-base-image:
          name: "base 10.18.0"
          dockerTag: "10.18.0"
      - build-base-image:
          name: "base 10.2.1"
          dockerTag: "10.2.1"
      - build-base-image:
          name: "base 11.13.0"
          dockerTag: "11.13.0"
      - build-base-image:
          name: "base 12.0.0"
          dockerTag: "12.0.0"
      - build-base-image:
          name: "base 12.1.0"
          dockerTag: "12.1.0"
      - build-base-image:
          name: "base 12.12.0"
          dockerTag: "12.12.0"
      - build-base-image:
          name: "base 12.13.0"
          dockerTag: "12.13.0"
      - build-base-image:
          name: "base 12.14.0"
          dockerTag: "12.14.0"
      - build-base-image:
          name: "base 12.4.0"
          dockerTag: "12.4.0"
      - build-base-image:
          name: "base 12.6.0"
          dockerTag: "12.6.0"
      - build-base-image:
          name: "base 13.1.0"
          dockerTag: "13.1.0"
      - build-base-image:
          name: "base 13.3.0"
          dockerTag: "13.3.0"
      - build-base-image:
          name: "base 6"
          dockerTag: "6"
      - build-base-image:
          name: "base 8"
          dockerTag: "8"
      - build-base-image:
          name: "base 8.15.1"
          dockerTag: "8.15.1"
      - build-base-image:
          name: "base 8.16.0"
          dockerTag: "8.16.0"
      - build-base-image:
          name: "base 8.2.1"
          dockerTag: "8.2.1"
      - build-base-image:
          name: "base 8.9.3"
          dockerTag: "8.9.3"
      - build-base-image:
          name: "base 8.9.3-npm-6.10.1"
          dockerTag: "8.9.3-npm-6.10.1"
      - build-base-image:
          name: "base centos7"
          dockerTag: "centos7"
      - build-base-image:
          name: "base centos7-12.4.0"
          dockerTag: "centos7-12.4.0"
      - build-base-image:
          name: "base ubuntu16"
          dockerTag: "ubuntu16"
      - build-base-image:
          name: "base ubuntu16-12.13.1"
          dockerTag: "ubuntu16-12.13.1"
      - build-base-image:
          name: "base ubuntu16-8"
          dockerTag: "ubuntu16-8"

  build-browser-images:
    jobs:
      - build-browser-image:
          name: "browsers chrome63-ff57"
          dockerTag: "chrome63-ff57"
      - build-browser-image:
          name: "browsers chrome65-ff57"
          dockerTag: "chrome65-ff57"
      - build-browser-image:
          name: "browsers chrome67"
          dockerTag: "chrome67"
      - build-browser-image:
          name: "browsers chrome67-ff57"
          dockerTag: "chrome67-ff57"
      - build-browser-image:
          name: "browsers chrome69"
          dockerTag: "chrome69"
      - build-browser-image:
          name: "browsers node10.11.0-chrome75"
          dockerTag: "node10.11.0-chrome75"
      - build-browser-image:
          name: "browsers node10.16.0-chrome76"
          dockerTag: "node10.16.0-chrome76"
      - build-browser-image:
          name: "browsers node10.16.0-chrome77"
          dockerTag: "node10.16.0-chrome77"
      - build-browser-image:
          name: "browsers node10.16.0-chrome77-ff71"
          dockerTag: "node10.16.0-chrome77-ff71"
      - build-browser-image:
          name: "browsers node10.2.1-chrome74"
          dockerTag: "node10.2.1-chrome74"
      - build-browser-image:
          name: "browsers node11.13.0-chrome73"
          dockerTag: "node11.13.0-chrome73"
      - build-browser-image:
          name: "browsers node12.0.0-chrome73"
          dockerTag: "node12.0.0-chrome73"
      - build-browser-image:
          name: "browsers node12.0.0-chrome73-ff68"
          dockerTag: "node12.0.0-chrome73-ff68"
      - build-browser-image:
          name: "browsers node12.0.0-chrome75"
          dockerTag: "node12.0.0-chrome75"
      - build-browser-image:
          name: "browsers node12.13.0-chrome78-ff70"
          dockerTag: "node12.13.0-chrome78-ff70"
      - build-browser-image:
          name: "browsers node12.13.0-chrome78-ff70-brave78"
          dockerTag: "node12.13.0-chrome78-ff70-brave78"
      - build-browser-image:
          name: "browsers node12.14.0-chrome79-ff71"
          dockerTag: "node12.14.0-chrome79-ff71"
      - build-browser-image:
          name: "browsers node12.4.0-chrome76"
          dockerTag: "node12.4.0-chrome76"
      - build-browser-image:
          name: "browsers node12.6.0-chrome75"
          dockerTag: "node12.6.0-chrome75"
      - build-browser-image:
          name: "browsers node12.6.0-chrome77"
          dockerTag: "node12.6.0-chrome77"
      - build-browser-image:
          name: "browsers node12.8.1-chrome78-ff70"
          dockerTag: "node12.8.1-chrome78-ff70"
      - build-browser-image:
          name: "browsers node13.1.0-chrome-78-ff70"
          dockerTag: "node13.1.0-chrome-78-ff70"
      - build-browser-image:
          name: "browsers node13.3.0-chrome-79-ff70"
          dockerTag: "node13.3.0-chrome-79-ff70"
      - build-browser-image:
          name: "browsers node8.15.1-chrome73"
          dockerTag: "node8.15.1-chrome73"
      - build-browser-image:
          name: "browsers node8.2.1-chrome73"
          dockerTag: "node8.2.1-chrome73"
      - build-browser-image:
          name: "browsers node8.9.3-chrome73"
          dockerTag: "node8.9.3-chrome73"
      - build-browser-image:
          name: "browsers node8.9.3-npm6.10.1-chrome75"
          dockerTag: "node8.9.3-npm6.10.1-chrome75"
      - build-browser-image:
          name: "browsers node8.9.3-npm6.10.1-chrome76-ff68"
          dockerTag: "node8.9.3-npm6.10.1-chrome76-ff68"

  build-included-images:
    jobs:
      - build-included-image:
          name: "included 3.2.0"
          dockerTag: "3.2.0"
      - build-included-image:
          name: "included 3.3.0"
          dockerTag: "3.3.0"
      - build-included-image:
          name: "included 3.3.1"
          dockerTag: "3.3.1"
      - build-included-image:
          name: "included 3.3.2"
          dockerTag: "3.3.2"
      - build-included-image:
          name: "included 3.4.0"
          dockerTag: "3.4.0"
      - build-included-image:
          name: "included 3.4.1"
          dockerTag: "3.4.1"
      - build-included-image:
          name: "included 3.5.0"
          dockerTag: "3.5.0"
      - build-included-image:
          name: "included 3.6.0"
          dockerTag: "3.6.0"
      - build-included-image:
          name: "included 3.6.1"
          dockerTag: "3.6.1"
      - build-included-image:
          name: "included 3.7.0"
          dockerTag: "3.7.0"
      - build-included-image:
          name: "included 3.8.0"
          dockerTag: "3.8.0"
      - build-included-image:
          name: "included 3.8.1"
          dockerTag: "3.8.1"
      - build-included-image:
          name: "included 3.8.2"
          dockerTag: "3.8.2"
